/*
 * This source file was generated by the Gradle 'init' task
 */
package javagamesolver;

import org.junit.jupiter.api.Test;

import javagamesolver.games.Connect_Four;
import javagamesolver.interfaces.Game;

import static org.junit.jupiter.api.Assertions.*;

class ConnectFourTest {

    @Test
    void horizontalWin() {
        Game game = new Connect_Four();
        for (int i = 0; i < 4; i++) {
            // Have both players play across a single row
            game = game.player_move(i);
            game = game.player_move(i);
        }
        assertTrue(game.is_winning_state());
    }

    @Test
    void verticalWin() {
        Game game = new Connect_Four();
        for (int i = 0; i < 4; i++) {
            // Have both players play across a column
            game = game.player_move(0);
            game = game.player_move(1);
        }
        assertTrue(game.is_winning_state());
    }

    @Test
    void diagonalUpWin() {
        Game game = new Connect_Four();
        for (int i = 0; i < 4; i++) {
            game = game.player_move(i);
            game = game.player_move(i + 1);
        }
        assertTrue(game.is_winning_state());
    }

    @Test
    void diagonalDownWin() {
        Game game = new Connect_Four();
        game = game.player_move(0);
        game = game.player_move(3); // Locks in 4th position

        game = game.player_move(0);
        game = game.player_move(2);

        game = game.player_move(0);
        game = game.player_move(0); // Locks in first position

        game = game.player_move(1);
        game = game.player_move(2); // Locks in 3rd position

        game = game.player_move(1);
        game = game.player_move(1); // Wins game

        System.out.println(game.toString());

        assertTrue(game.is_winning_state());
    }
}